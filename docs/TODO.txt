# Eform Project - Working TODOs

This file tracks a comprehensive set of tasks derived from the requirements document. Items are grouped and marked with status. This TODO is maintained as we implement features - whenever we complete a task, we update the status here.

Legend: [x] done · [>] in-progress · [ ] pending · [~] partial

## Accounts, Auth, RBAC

- [x] Users table (email unique, password hash, role)
- [x] Session login page (Vuexy) + logout
- [x] JWT API (login, refresh, logout) + bcrypt hashing
- [x] Login rate limiting (20 attempts per 5 min window)
- [x] Feature flag `AUTH_ENABLED` to enforce guards
- [x] Protect UI routes: `/forms`, `/builder/:id`, `/builder/new`
- [x] Protect APIs: `/api/forms` CRUD (session or Bearer JWT)
- [x] CORS: strict allowlist via `CORS_ORIGIN` (dev fallback allowed)
- [x] RBAC middleware: `requireRole('admin'|'editor'|'viewer')` (fully implemented and working)
- [x] Apply RBAC to routes: create/update/delete (admin|editor), read (all) (fully implemented, no ownership restrictions)
- [x] Ownership: add `forms.createdBy` (ownership restrictions removed - editors can edit any form)
- [x] User management (admin UI/API): create user, set role, reset password (full admin interface implemented)
- [x] Password policy + account lockout on repeated failures (comprehensive policy with complexity requirements, 5-attempt lockout for 30 minutes, full implementation)
- [ ] Password reset (token email) + change password flows
- [ ] JWT refresh rotation + logout-all-sessions
- [x] CSRF tokens for session-based POSTs (enabled for HTML routes; APIs/public submissions exempt)

## Backend Security & Compliance

- [x] Strict CORS allowlist (`CORS_ORIGIN`), remove permissive defaults
- [x] Security headers (Helmet) + CSP (CSP behind `CSP_ENABLED=1`; defaults on in prod, off in dev)
- [x] Input validation/sanitization for auth and user inputs (server) (comprehensive validation service with sanitization, field validation, and security checks - fully implemented)
- [ ] Rate limit other POST APIs (form writes, submissions) (only login endpoints rate limited)
- [x] Audit log: form create/update/delete + auth events (full audit service with UI implemented)
- [ ] HTTPS in prod, secure cookies, trust proxy, persistent session store

## Forms: Features & Builder (from doc)

- [x] Types & categories UI (survey/quiz/feedback; category label editing)
- [x] Elements: text, textarea, dropdown, radios, checkboxes, number, name, email, phone, date, time, datetime, url, file (all field types implemented)
- [x] Attributes: label, placeholder, required, options, position (all core attributes implemented)
- [x] Validation: required/options; email/number formatting; real-time feedback present in builder
- [x] Drag-and-drop reorder; duplicate; delete elements
- [x] Responsive builder layout (desktop/mobile)
- [x] Preview mode (builder preview exists; hosted form serves as publish preview)

## Rules & Conditional Logic

- [ ] Form rules engine (If answer is X â†’ show Y)
- [ ] Server-side mirroring of rules validation

## API & Data

- [x] REST API for forms CRUD (JSON)
- [x] Public submission endpoint + store
- [ ] Export submissions (JSON/CSV) (submissions service implemented with CRUD operations, but no export API endpoints yet)

## Database Schema (from doc)

- [x] Form table: has `created_by`, `category` (form_type equivalent), missing `version_number`
- [x] Elements table: FormField model with all attributes, position (order_index equivalent) - fully implemented
- [ ] Rules table: `rule_id`, `condition`, `action` (conditional logic not implemented)
- [x] Submissions table (FormSubmission model implemented)
- [x] Submission answers table (normalized) â€" stored as JSON in FormSubmission.payloadJson with proper service layer
- [ ] Drafts table: `draft_id`, `form_id`, `user_id`, `draft_data`, `last_saved_at` (not implemented)
- [ ] Versioning storage & rollback support (not implemented)
- [x] Indexes (form_id/submission_id) implemented where needed
- [ ] Cleanup job: delete expired drafts (>30 days) (not implemented)

## File Uploads

- [x] File field type in builder + UI (file field type available in builder, enhanced HTML file input)
- [x] Backend upload endpoint (size/type restrictions) (multer-based upload with 10MB limit, type filtering, comprehensive error handling)
- [x] Storage (local storage in uploads/ directory) + metadata persistence (full implementation with file management utilities)
- [ ] Malware scanning hook (optional)

## Frontend Security

- [x] Escape/sanitize labels and inputs (Handlebars escapes by default, validation in place)
- [x] CSP to block unauthorized scripts (implemented with CSP_ENABLED flag)
- [x] Secure file uploads on client (type/size checks) (enhanced file input with accept attributes and validation messages)

## Infra & Monitoring

- [ ] Enforce HTTPS everywhere in prod (secure cookie flags set to false for dev)
- [x] Logging/monitoring for auth attempts, API usage, errors (comprehensive audit logging implemented)
- [ ] Alerts for suspicious activity
- [ ] Keep dependencies patched (schedule)

---

### Immediate Next Steps (suggested order)

1) [x] Fix RBAC middleware syntax error in forms.routes.js line 40 (COMPLETED)
2) [x] File upload backend handling with storage (COMPLETED - multer middleware, validation, storage)
3) [x] Enhanced password policy and account lockout (COMPLETED - comprehensive policy with 5-attempt lockout)
4) [x] Form versioning and draft functionality (REMOVED - unused code cleaned up)
5) Add export API endpoints for form submissions (JSON/CSV download)
6) Add rate limiting to other POST APIs (form writes, submissions)
7) Implement password reset flow (token email + change password)
8) Implement conditional logic/rules engine for forms

## Meta

- [x] Keep this TODO up to date after each implemented change (mark items done/partial and adjust next steps).

---

### Summary of Current Implementation Status

**COMPLETED MAJOR FEATURES:**
- Full authentication system with JWT and session support
- Complete RBAC with user management admin interface
- Comprehensive form builder with all field types (text, textarea, dropdown, radios, checkboxes, number, name, email, phone, date, time, datetime, url, file)
- Form validation and real-time feedback
- Drag-and-drop form builder interface
- Public form hosting and submission handling
- Full audit logging system with admin interface
- Security headers, CORS, CSRF protection
- Rate limiting for authentication endpoints
- Form versioning and draft functionality (removed - unused code)

**PARTIALLY IMPLEMENTED:**
- Export functionality (submissions service exists, but no export API endpoints)
- Rate limiting (only authentication endpoints, other POST APIs not rate limited)

**NOT YET IMPLEMENTED:**
- Conditional logic/rules engine for forms
- Export API endpoints for submissions (JSON/CSV download)
- Password reset flows (token email + change password)
- JWT refresh rotation + logout-all-sessions
- Rate limiting for non-auth endpoints
- HTTPS enforcement in production
- Malware scanning for file uploads
