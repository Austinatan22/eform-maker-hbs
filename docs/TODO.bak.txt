# Eform Project â€“ Working TODOs

This file tracks a comprehensive set of tasks derived from the requirements doc. Items are grouped and marked with status. This TODO is maintained as we implement features â€” whenever we complete a task, we update the status here.

Legend: [x] done Â· [>] inâ€‘progress Â· [ ] pending Â· [~] partial

## Accounts, Auth, RBAC

- [x] Users table (email unique, password hash, role)
- [x] Session login page (Vuexy) + logout
- [x] JWT API (login, refresh, logout) + bcrypt hashing
- [x] Login rate limiting
- [x] Feature flag `AUTH_ENABLED` to enforce guards
- [x] Protect UI routes: `/forms`, `/builder/:id`, `/builder/new`
- [x] Protect APIs: `/api/forms` CRUD (session or Bearer JWT)
- [x] CORS: strict allowlist via `CORS_ORIGIN` (dev fallback allowed)
- [x] RBAC middleware: `requireRole('admin'|'editor'|'viewer')`
- [x] Apply RBAC to routes: create/update/delete (admin|editor), read (all)
- [x] Ownership: add `forms.createdBy` and enforce owner-or-admin edits
- [ ] User management (admin UI/API): create user, set role, reset password
- [ ] Password policy + account lockout on repeated failures
- [ ] Password reset (token email) + change password flows
- [ ] JWT refresh rotation + logout-all-sessions
- [x] CSRF tokens for session-based POSTs (enabled for HTML routes; APIs/public submissions exempt)

## Backend Security & Compliance

- [x] Strict CORS allowlist (`CORS_ORIGIN`), remove permissive defaults
- [~] Security headers (Helmet) + CSP (CSP behind `CSP_ENABLED=1`; defaults on in prod, off in dev)
- [ ] Input validation/sanitization for auth and user inputs (server)
- [ ] Rate limit other POST APIs (form writes, submissions)
- [ ] Audit log: form create/update/delete + auth events
- [ ] HTTPS in prod, secure cookies, trust proxy, persistent session store

## Forms: Features & Builder (from doc)

- [x] Types & categories UI (survey/quiz/feedback; category label editing)
- [~] Elements: text, textarea, dropdown, radios, checkboxes, number, name, email, phone (file upload pending)
- [~] Attributes: label, placeholder, required, options; max length/defaults pending
- [~] Validation: required/options; email/number formatting pending; real-time feedback present in builder
- [x] Drag-and-drop reorder; duplicate; delete elements
- [x] Responsive builder layout (desktop/mobile)
- [~] Preview mode (builder preview exists; separate publish preview optional)

## Rules & Conditional Logic

- [ ] Form rules engine (If answer is X â†’ show Y)
- [ ] Server-side mirroring of rules validation

## API & Data

- [x] REST API for forms CRUD (JSON)
- [x] Public submission endpoint + store
- [ ] Export submissions (JSON/CSV)

## Database Schema (from doc)

- [~] Form table: add `created_by` (done), `form_type`, `version_number`
- [ ] Elements table: attributes JSON, `order_index`
- [ ] Rules table: `rule_id`, `condition`, `action`
- [x] Submissions table
- [ ] Submission answers table (normalized) â€“ currently stored JSON
- [ ] Drafts table: `draft_id`, `form_id`, `user_id`, `draft_data`, `last_saved_at`
- [ ] Versioning storage & rollback support
- [ ] Indexes (form_id/submission_id) where needed
- [ ] Cleanup job: delete expired drafts (>30 days)

## File Uploads

- [ ] File field type in builder + UI
- [ ] Backend upload endpoint (size/type restrictions)
- [ ] Storage (local/S3) + metadata persistence
- [ ] Malware scanning hook (optional)

## Frontend Security

- [~] Escape/sanitize labels and inputs (Handlebars escapes by default)
- [ ] CSP to block unauthorized scripts
- [ ] Secure file uploads on client (type/size checks)

## Infra & Monitoring

- [ ] Enforce HTTPS everywhere in prod
- [ ] Logging/monitoring for auth attempts, API usage, errors
- [ ] Alerts for suspicious activity
- [ ] Keep dependencies patched (schedule)

---

### Immediate Next Steps (suggested order)

1) RBAC middleware and apply to form routes
2) Tighten CORS + add helmet/CSP
3) CSRF for session-based POSTs (/login and protected views)
4) Audit logging for form operations
5) User management (admin) basics

## Meta

- [ ] Keep this TODO up to date after each implemented change (mark items done/partial and adjust next steps).
