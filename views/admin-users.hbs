<div class="card">
  <div class="card-header d-flex justify-content-between align-items-center">
    <h5 class="mb-0">Users</h5>
    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createUserModal">+ New User</button>
  </div>
  <div class="card-body p-0">
    <div class="table-responsive">
      <table class="table table-hover mb-0 align-middle">
        <thead class="table-light">
          <tr>
            <th>Email</th>
            <th>Role</th>
            <th>Created</th>
            <th class="text-end">Actions</th>
          </tr>
        </thead>
        <tbody id="usersTbody">
          {{#each users}}
            <tr data-id="{{this.id}}">
              <td class="fw-medium">{{this.email}}</td>
              <td>
                <div class="btn-group w-100">
                  <button type="button" class="btn btn-sm dropdown-toggle w-100 d-flex justify-content-between align-items-center js-role-btn" data-bs-toggle="dropdown" data-role="{{this.role}}"></button>
                  <ul class="dropdown-menu dropdown-menu-end">
                    <li><a class="dropdown-item js-role-opt" data-val="admin" href="javascript:void(0);">Admin</a></li>
                    <li><a class="dropdown-item js-role-opt" data-val="editor" href="javascript:void(0);">Editor</a></li>
                    <li><a class="dropdown-item js-role-opt" data-val="viewer" href="javascript:void(0);">Viewer</a></li>
                  </ul>
                </div>
              </td>
              <td><span class="text-muted">{{this.createdAt}}</span></td>
              <td class="text-end">
                <div class="d-inline-flex align-items-center gap-1">
                  <button class="btn btn-sm btn-outline-secondary js-reset-pass" type="button">
                    <i class="icon-base ti tabler-key icon-sm me-1"></i> Reset Password
                  </button>
                  <div class="btn-group">
                    <button type="button" class="btn btn-sm btn-icon rounded-pill dropdown-toggle hide-arrow btn-text-secondary js-more" data-bs-toggle="dropdown" aria-expanded="false">
                      <i class="icon-base ti tabler-dots-vertical icon-20px"></i>
                    </button>
                    <ul class="dropdown-menu dropdown-menu-end">
                      <li>
                        <a class="dropdown-item text-danger js-delete-user" href="javascript:void(0);">
                          <i class="icon-base ti tabler-trash icon-sm me-2"></i> Delete
                        </a>
                      </li>
                    </ul>
                  </div>
                </div>
              </td>
            </tr>
          {{/each}}
        </tbody>
      </table>
    </div>
  </div>
</div>

<div class="modal fade" id="createUserModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <form class="modal-content" id="createUserForm">
      <div class="modal-header">
        <h5 class="modal-title">Create user</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="mb-3">
          <label class="form-label" for="newUserEmail">Email</label>
          <input id="newUserEmail" type="email" class="form-control" placeholder="you@example.com" required>
        </div>
        <div class="mb-3">
          <label class="form-label" for="newUserPassword">Password</label>
          <input id="newUserPassword" type="password" class="form-control" placeholder="Min 6 characters" minlength="6" required>
        </div>
        <div class="mb-3">
          <label class="form-label" for="newUserRole">Role</label>
          <select id="newUserRole" class="form-select">
            <option value="editor" selected>Editor</option>
            <option value="admin">Admin</option>
            <option value="viewer">Viewer</option>
          </select>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="submit" class="btn btn-primary">Create</button>
      </div>
    </form>
  </div>
</div>

{{#section 'scripts'}}
<script>
(function(){
  const CSRF = document.querySelector('meta[name="csrf-token"]')?.content || window.CSRF_TOKEN || '';
  function roleLabel(r){ return r==='admin'?'Admin':(r==='viewer'?'Viewer':'Editor'); }
  document.querySelectorAll('.js-role-btn').forEach(btn => {
    const r = btn.getAttribute('data-role') || 'editor';
    btn.textContent = roleLabel(r);
  });
  document.getElementById('usersTbody')?.addEventListener('click', async (e) => {
    const row = e.target.closest('tr[data-id]');
    const id = row?.dataset.id;
    if (!id) return;
    const roleOpt = e.target.closest('.js-role-opt');
    if (roleOpt) {
      const val = roleOpt.getAttribute('data-val');
      try {
        const res = await fetch('/api/users/' + id, { method: 'PUT', headers: { 'Content-Type': 'application/json', 'CSRF-Token': CSRF }, body: JSON.stringify({ role: val }) });
        if (!res.ok) throw new Error('Update failed');
        const btn = row.querySelector('.js-role-btn');
        if (btn) { btn.textContent = roleLabel(val); btn.setAttribute('data-role', val); }
      } catch(err){ alert(err?.message || 'Could not update role'); }
      return;
    }
    const reset = e.target.closest('.js-reset-pass');
    if (reset) {
      const p = prompt('Enter new password (min 6 chars):');
      if (!p) return;
      if (p.length < 6) return alert('Password too short');
      try {
        const res = await fetch('/api/users/' + id, { method: 'PUT', headers: { 'Content-Type': 'application/json', 'CSRF-Token': CSRF }, body: JSON.stringify({ password: p }) });
        if (!res.ok) throw new Error('Reset failed');
        alert('Password updated');
      } catch(err){ alert(err?.message || 'Could not reset password'); }
      return;
    }
    const del = e.target.closest('.js-delete-user');
    if (del) {
      if (!confirm('Delete this user?')) return;
      try {
        const res = await fetch('/api/users/' + id, { method: 'DELETE', headers: { 'CSRF-Token': CSRF } });
        if (!res.ok) throw new Error('Delete failed');
        row.remove();
      } catch(err){ alert(err?.message || 'Could not delete user'); }
      return;
    }
  });

  document.getElementById('createUserForm')?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const email = document.getElementById('newUserEmail').value.trim();
    const password = document.getElementById('newUserPassword').value;
    const role = document.getElementById('newUserRole').value;
    try {
      const res = await fetch('/api/users', { method: 'POST', headers: { 'Content-Type': 'application/json', 'CSRF-Token': CSRF }, body: JSON.stringify({ email, password, role }) });
      const out = await res.json();
      if (!res.ok || !out?.user) throw new Error(out?.error || 'Create failed');
      location.reload();
    } catch(err){ alert(err?.message || 'Could not create user'); }
  });
})();
</script>
{{/section}}

