<div class="card">
  <div class="card-header d-flex justify-content-between align-items-center">
    <h5 class="mb-0">Users</h5>
    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createUserModal">+ New User</button>
  </div>
  <div class="card-datatable table-responsive pt-0">
    <table class="datatables-users table" id="usersTable" data-protected-id="{{protectedAdminId}}">
      <thead>
        <tr>
          <th>Email</th>
          <th>Username</th>
          <th>Role</th>
          <th>Updated</th>
          <th>Actions</th>
        </tr>
      </thead>
    </table>
  </div>
</div>

<div class="modal fade" id="createUserModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <form class="modal-content" id="createUserForm" onsubmit="event.preventDefault();">
      <div class="modal-header">
        <h5 class="modal-title">Create user</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="mb-3">
          <label class="form-label" for="newUserEmail">Email</label>
          <input id="newUserEmail" type="email" class="form-control" placeholder="you@example.com" required>
        </div>
        <div class="mb-3">
          <label class="form-label" for="newUserUsername">Username</label>
          <input id="newUserUsername" type="text" class="form-control" placeholder="e.g. johndoe" required>
        </div>
        <div class="mb-3">
          <label class="form-label" for="newUserPassword">Password</label>
          <input id="newUserPassword" type="password" class="form-control" placeholder="Enter password" minlength="8"
            maxlength="128" required>
          <div class="form-text">
            <strong>Password requirements:</strong><br>
            • At least 8 characters long<br>
            • At least one uppercase letter (A-Z)<br>
            • At least one lowercase letter (a-z)<br>
            • At least one number (0-9)<br>
            • At least one special character (!@#$%^&*()_+-=[]{}|;:,.<>?)
          </div>
        </div>
        <div class="mb-3">
          <label class="form-label" for="newUserRole">Role</label>
          <select id="newUserRole" class="form-select">
            <option value="editor" selected>Editor</option>
            <option value="admin">Admin</option>
            <option value="viewer">Viewer</option>
          </select>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="submit" class="btn btn-primary">Create</button>
      </div>
    </form>
  </div>
</div>

{{#section 'scripts'}}
<script>
  document.addEventListener('DOMContentLoaded', function () {
    const CSRF = document.querySelector('meta[name="csrf-token"]').content || window.CSRF_TOKEN || '';

    function roleLabel(r) { return r === 'admin' ? 'Admin' : (r === 'viewer' ? 'Viewer' : 'Editor'); }
    function roleBadgeClass(r) {
      switch ((r || '').toLowerCase()) {
        case 'admin': return 'bg-label-danger';
        case 'viewer': return 'bg-label-secondary';
        default: return 'bg-label-primary';
      }
    }

    function formatDateVerbose(val) {
      try {
        const d = new Date(val);
        if (isNaN(d)) return String(val || '');
        const DD = String(d.getDate()).padStart(2, '0');
        const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];
        const MMM = months[d.getMonth()] || '';
        const YYYY = d.getFullYear();
        const hh = String(d.getHours()).padStart(2, '0');
        const mm = String(d.getMinutes()).padStart(2, '0');
        const ss = String(d.getSeconds()).padStart(2, '0');
        return `${DD} ${MMM} ${YYYY}, ${hh}:${mm}:${ss}`;
      } catch (_) { return String(val || ''); }
    }

    // Initialize DataTable
    const usersTable = document.getElementById('usersTable');
    let dt_users;

    if (usersTable) {
      const protectedAdminId = usersTable.getAttribute('data-protected-id') || '';

      dt_users = new DataTable(usersTable, {
        ajax: {
          url: '/api/users',
          headers: { 'CSRF-Token': CSRF }
        },
        columns: [
          { data: 'email' },
          { data: 'username' },
          { data: 'role' },
          { data: 'updatedAt' },
          { data: 'id' }
        ],
        columnDefs: [
          {
            // Email column
            targets: 0,
            render: function (data, type, full, meta) {
              return `<span class="fw-medium">${data || ''}</span>`;
            }
          },
          {
            // Username column
            targets: 1,
            render: function (data, type, full, meta) {
              return `<span class="js-username">${data || ''}</span>`;
            }
          },
          {
            // Role column
            targets: 2,
            render: function (data, type, full, meta) {
              return `<span class="badge rounded-pill ${roleBadgeClass(data)}">${roleLabel(data)}</span>`;
            }
          },
          {
            // Updated column
            targets: 3,
            render: function (data, type, full, meta) {
              return `<span class="text-muted">${formatDateVerbose(data)}</span>`;
            }
          },
          {
            // Actions column
            targets: -1,
            title: 'Actions',
            orderable: false,
            searchable: false,
            render: function (data, type, full, meta) {
              const isProtected = full.id === protectedAdminId;
              return `
                <div class="d-inline-flex align-items-center gap-1 justify-content-start">
                  <button class="btn btn-sm btn-outline-secondary js-reset-pass" type="button" data-id="${full.id}">
                    <i class="icon-base ti tabler-key icon-sm me-1"></i>
                    Reset
                  </button>
                  <div class="btn-group">
                    <button type="button"
                      class="btn btn-sm btn-icon rounded-pill dropdown-toggle hide-arrow btn-text-secondary js-actions"
                      data-bs-toggle="dropdown" data-bs-container="body" aria-expanded="false">
                      <i class="icon-base ti tabler-dots-vertical icon-20px"></i>
                    </button>
                    <ul class="dropdown-menu dropdown-menu-end">
                      <li>
                        <a class="dropdown-item js-act-info" href="javascript:void(0);" data-id="${full.id}">
                          <i class="icon-base ti tabler-info-circle icon-sm me-2"></i>
                          Info
                        </a>
                      </li>
                      ${isProtected ? '' : `
                      <li>
                        <a class="dropdown-item text-danger js-delete-user" href="javascript:void(0);" data-id="${full.id}">
                          <i class="icon-base ti tabler-trash icon-sm me-2"></i>
                          Delete
                        </a>
                      </li>
                      `}
                    </ul>
                  </div>
                </div>
              `;
            }
          }
        ],
        order: [[3, 'desc']], // Sort by updated date descending by default
        layout: {
          topStart: {
            rowClass: 'row mx-3 my-0 justify-content-between',
            features: [
              {
                pageLength: {
                  menu: [10, 25, 50, 100],
                  text: 'Show_MENU_entries'
                }
              }
            ]
          },
          topEnd: {
            search: {
              placeholder: 'Search users...'
            }
          },
          bottomStart: {
            rowClass: 'row mx-3 justify-content-between',
            features: ['info']
          },
          bottomEnd: 'paging'
        },
        language: {
          paginate: {
            next: '<i class="icon-base ti tabler-chevron-right scaleX-n1-rtl icon-18px"></i>',
            previous: '<i class="icon-base ti tabler-chevron-left scaleX-n1-rtl icon-18px"></i>',
            first: '<i class="icon-base ti tabler-chevrons-left scaleX-n1-rtl icon-18px"></i>',
            last: '<i class="icon-base ti tabler-chevrons-right scaleX-n1-rtl icon-18px"></i>'
          }
        }
      });

      // Initialize dropdowns after table is drawn
      usersTable.addEventListener('draw.dt', function () {
        document.querySelectorAll('.js-actions').forEach(btn => {
          try {
            const dd = bootstrap.Dropdown.getOrCreateInstance(btn, {
              boundary: 'viewport',
              popperConfig(config) { return Object.assign({}, config || {}, { strategy: 'fixed' }); }
            });
            void dd;
          } catch (_) { }
        });
      });

      // Handle table clicks
      usersTable.addEventListener('click', async (e) => {
        const info = e.target.closest('.js-act-info');
        if (info) {
          const id = info.getAttribute('data-id');
          if (!id) return;

          // Get user data from DataTable
          const userData = dt_users.row(`tr:has([data-id="${id}"])`).data();
          if (!userData) return;

          const modalEl = document.getElementById('userInfoModal');
          modalEl.dataset.id = id;
          const input = modalEl.querySelector('#userInfoUsername');
          const roleSel = modalEl.querySelector('#userInfoRole');
          input.value = userData.username || '';
          const curRole = userData.role || 'editor';
          if (roleSel) roleSel.value = ['admin', 'editor', 'viewer'].includes(curRole) ? curRole : 'editor';
          const m = bootstrap.Modal.getOrCreateInstance(modalEl);
          m.show();
          return;
        }

        const reset = e.target.closest('.js-reset-pass');
        if (reset) {
          const id = reset.getAttribute('data-id');
          if (!id) return;

          const modalEl = document.getElementById('resetPasswordModal');
          modalEl.dataset.id = id;
          // Clear form fields
          document.getElementById('resetPasswordInput').value = '';
          document.getElementById('resetPasswordConfirm').value = '';
          const m = bootstrap.Modal.getOrCreateInstance(modalEl);
          m.show();
          return;
        }

        const del = e.target.closest('.js-delete-user');
        if (del) {
          const id = del.getAttribute('data-id');
          if (!id) return;

          const pid = usersTable.getAttribute('data-protected-id') || '';
          if (id && pid && id === pid) { alert('Cannot delete main admin user'); return; }
          if (!confirm('Delete this user?')) return;

          try {
            const res = await fetch('/api/users/' + id, { method: 'DELETE', headers: { 'CSRF-Token': CSRF } });
            if (!res.ok) throw new Error('Delete failed');
            dt_users.ajax.reload();
          } catch (err) { alert(err?.message || 'Could not delete user'); }
          return;
        }
      });

      document.getElementById('createUserForm')?.addEventListener('submit', async (e) => {
        e.preventDefault();
        const email = document.getElementById('newUserEmail').value.trim();
        const username = document.getElementById('newUserUsername').value.trim();
        const password = document.getElementById('newUserPassword').value;
        const role = document.getElementById('newUserRole').value;

        // Password validation
        if (password.length < 8) {
          alert('Password must be at least 8 characters long');
          return;
        }
        if (password.length > 128) {
          alert('Password must be no more than 128 characters long');
          return;
        }
        if (!/[A-Z]/.test(password)) {
          alert('Password must contain at least one uppercase letter');
          return;
        }
        if (!/[a-z]/.test(password)) {
          alert('Password must contain at least one lowercase letter');
          return;
        }
        if (!/\d/.test(password)) {
          alert('Password must contain at least one number');
          return;
        }
        if (!/[!@#$%^&*()_+\-=\[\]{}|;:,.<>?]/.test(password)) {
          alert('Password must contain at least one special character (!@#$%^&*()_+-=[]{}|;:,.<>?)');
          return;
        }

        try {
          const res = await fetch('/api/users', { method: 'POST', headers: { 'Content-Type': 'application/json', 'CSRF-Token': CSRF }, body: JSON.stringify({ email, username, password, role }) });
          const out = await res.json();
          if (!res.ok || !out?.user) throw new Error(out?.error || 'Create failed');
          dt_users.ajax.reload();
          bootstrap.Modal.getInstance(document.getElementById('createUserModal'))?.hide();
        } catch (err) { alert(err?.message || 'Could not create user'); }
      });

      // Handle Info modal submit (username + role)
      document.getElementById('userInfoForm')?.addEventListener('submit', async (e) => {
        e.preventDefault();
        const modalEl = document.getElementById('userInfoModal');
        const id = modalEl?.dataset.id;
        if (!id) return;
        const username = String(document.getElementById('userInfoUsername')?.value || '').trim();
        const role = String(document.getElementById('userInfoRole')?.value || 'editor');
        try {
          const res = await fetch('/api/users/' + id, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json', 'CSRF-Token': CSRF },
            body: JSON.stringify({ username, role })
          });
          const out = await res.json().catch(() => ({}));
          if (!res.ok) throw new Error(out?.error || 'Update failed');
          dt_users.ajax.reload();
          bootstrap.Modal.getInstance(modalEl)?.hide();
        } catch (err) { alert(err?.message || 'Could not update user'); }
      });

      // Handle Reset Password modal submit
      document.getElementById('resetPasswordForm')?.addEventListener('submit', async (e) => {
        e.preventDefault();
        const modalEl = document.getElementById('resetPasswordModal');
        const id = modalEl?.dataset.id;
        if (!id) return;

        const password = document.getElementById('resetPasswordInput')?.value || '';
        const confirmPassword = document.getElementById('resetPasswordConfirm')?.value || '';
        const btn = document.getElementById('resetPasswordBtn');
        const originalText = btn?.textContent;

        // Validation
        if (password.length < 8) {
          alert('Password must be at least 8 characters long');
          return;
        }
        if (password.length > 128) {
          alert('Password must be no more than 128 characters long');
          return;
        }
        if (!/[A-Z]/.test(password)) {
          alert('Password must contain at least one uppercase letter');
          return;
        }
        if (!/[a-z]/.test(password)) {
          alert('Password must contain at least one lowercase letter');
          return;
        }
        if (!/\d/.test(password)) {
          alert('Password must contain at least one number');
          return;
        }
        if (!/[!@#$%^&*()_+\-=\[\]{}|;:,.<>?]/.test(password)) {
          alert('Password must contain at least one special character (!@#$%^&*()_+-=[]{}|;:,.<>?)');
          return;
        }
        if (password !== confirmPassword) {
          alert('Passwords do not match');
          return;
        }

        try {
          // Show loading state
          if (btn) {
            btn.disabled = true;
            btn.textContent = 'Resetting...';
          }

          const res = await fetch('/api/users/' + id, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json', 'CSRF-Token': CSRF },
            body: JSON.stringify({ password })
          });
          const out = await res.json().catch(() => ({}));
          if (!res.ok) throw new Error(out?.error || 'Reset failed');

          if (out?.reauth) {
            alert('Password updated. Please log in again.');
            window.location.assign('/login');
            return;
          }
          alert('Password updated successfully');
          dt_users.ajax.reload();
          bootstrap.Modal.getInstance(modalEl)?.hide();
        } catch (err) {
          alert(err?.message || 'Could not reset password');
        } finally {
          // Restore button state
          if (btn) {
            btn.disabled = false;
            btn.textContent = originalText;
          }
        }
      });
    }
  });
</script>
{{/section}}


{{!-- User Info modal --}}
<div class="modal fade" id="userInfoModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <form class="modal-content" id="userInfoForm" onsubmit="event.preventDefault();">
      <div class="modal-header">
        <h5 class="modal-title">User info</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="mb-3">
          <label class="form-label" for="userInfoUsername">Username</label>
          <input id="userInfoUsername" type="text" class="form-control" placeholder="Enter username" required>
        </div>
        <div>
          <label class="form-label" for="userInfoRole">Role</label>
          <select id="userInfoRole" class="form-select">
            <option value="admin">Admin</option>
            <option value="editor" selected>Editor</option>
            <option value="viewer">Viewer</option>
          </select>
        </div>
      </div>
      <div class="modal-footer">
        <button class="btn btn-secondary" type="button" data-bs-dismiss="modal">Cancel</button>
        <button class="btn btn-primary" type="submit">Save</button>
      </div>
    </form>
  </div>
</div>

{{!-- Reset Password modal --}}
<div class="modal fade" id="resetPasswordModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <form class="modal-content" id="resetPasswordForm" onsubmit="event.preventDefault();">
      <div class="modal-header">
        <h5 class="modal-title">Reset Password</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="mb-3">
          <label class="form-label" for="resetPasswordInput">New Password</label>
          <input id="resetPasswordInput" type="password" class="form-control" placeholder="Enter new password"
            minlength="8" maxlength="128" required>
          <div class="form-text">
            <strong>Password requirements:</strong><br>
            • At least 8 characters long<br>
            • At least one uppercase letter (A-Z)<br>
            • At least one lowercase letter (a-z)<br>
            • At least one number (0-9)<br>
            • At least one special character (!@#$%^&*()_+-=[]{}|;:,.<>?)
          </div>
        </div>
        <div class="mb-3">
          <label class="form-label" for="resetPasswordConfirm">Confirm Password</label>
          <input id="resetPasswordConfirm" type="password" class="form-control" placeholder="Confirm new password"
            minlength="8" maxlength="128" required>
        </div>
      </div>
      <div class="modal-footer">
        <button class="btn btn-secondary" type="button" data-bs-dismiss="modal">Cancel</button>
        <button class="btn btn-primary" type="submit" id="resetPasswordBtn">Reset Password</button>
      </div>
    </form>
  </div>
</div>