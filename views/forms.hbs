{{!-- views/forms.hbs --}}
<div class="card">
  <div class="card-header d-flex justify-content-between align-items-center">
    <h5 class="mb-0">Forms</h5>
    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createFormModal">
      + Create a Form
    </button>
  </div>

  <div class="card-datatable table-responsive pt-0">
    <table class="datatables-forms table" id="formsTable">
      <thead>
        <tr>
          <th>Title</th>
          <th>Category</th>
          <th>Updated</th>
          <th>Actions</th>
        </tr>
      </thead>
    </table>
  </div>
</div>

{{!-- Create Form wizard modal --}}
<div class="modal fade" id="createFormModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable" role="document">
    <div class="modal-content rounded-3" id="createFormWizard">
      <div class="modal-header">
        <h5 class="modal-title js-wiz-title">Create a Form</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="js-step" data-step="choose">
          <p class="text-muted mb-3">How would you like to start?</p>
          <div class="row g-2">
            <div class="col-6">
              <div class="ratio ratio-1x1">
                <button type="button"
                  class="btn btn-outline-secondary w-100 h-100 d-flex flex-column align-items-center justify-content-center js-choose-blank">
                  <h2 class="mb-1 text-reset"><i class="icon-base ti tabler-file-plus icon-42px"></i></h2>
                  <div class="fw-medium text-center">Create a blank form</div>
                </button>
              </div>
            </div>
            <div class="col-6">
              <div class="ratio ratio-1x1">
                <button type="button"
                  class="btn btn-outline-primary w-100 h-100 d-flex flex-column align-items-center justify-content-center js-choose-template">
                  <h2 class="mb-1 text-reset"><i class="icon-base ti tabler-template icon-42px"></i></h2>
                  <div class="fw-medium text-center">Start from a template</div>
                </button>
              </div>
            </div>
          </div>
        </div>

        <div class="js-step d-none" data-step="blank">
          <div class="mb-3">
            <label class="form-label" for="blankTitle">Form Name</label>
            <input id="blankTitle" type="text" class="form-control" placeholder="e.g. Contact Us" required>
          </div>
          <div>
            <label class="form-label" for="blankCategory">Category</label>
            <select id="blankCategory" class="form-select">
              <option value="">Uncategorized</option>
              {{#each categories}}
              <option value="{{this.id}}">{{this.name}}</option>
              {{/each}}
            </select>
          </div>
        </div>

        <div class="js-step d-none" data-step="templates">
          <p class="text-muted">Pick a template</p>
          <div class="row row-cols-2 g-2" id="templatesContainer">
            <div class="col-12">
              <div class="alert alert-info">
                <i class="icon-base ti tabler-info-circle me-2"></i>
                Loading templates...
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary js-wiz-back d-none">Back</button>
        <button type="button" class="btn btn-primary js-wiz-next">Next</button>
      </div>
    </div>
  </div>
</div>

{{#section 'scripts'}}
<script>
  document.addEventListener('DOMContentLoaded', function () {
    const CSRF = document.querySelector('meta[name="csrf-token"]').content || window.CSRF_TOKEN || '';

    function catBadgeClass(cat) {
      switch ((cat || '').toLowerCase()) {
        case 'quiz': return 'bg-label-info';
        case 'feedback': return 'bg-label-warning';
        default: return 'bg-label-primary';
      }
    }

    function catLabel(cat) {
      const v = String(cat || 'survey').toLowerCase();
      if (v === 'quiz') return 'Quiz';
      if (v === 'feedback') return 'Feedback';
      return 'Survey';
    }

    function formatDateVerbose(val) {
      try {
        const d = new Date(val);
        if (isNaN(d)) return String(val || '');
        const DD = String(d.getDate()).padStart(2, '0');
        const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];
        const MMM = months[d.getMonth()] || '';
        const YYYY = d.getFullYear();
        const hh = String(d.getHours()).padStart(2, '0');
        const mm = String(d.getMinutes()).padStart(2, '0');
        const ss = String(d.getSeconds()).padStart(2, '0');
        return `${DD} ${MMM} ${YYYY}, ${hh}:${mm}:${ss}`;
      } catch (_) { return String(val || ''); }
    }

    // Initialize DataTable
    const formsTable = document.getElementById('formsTable');
    let dt_forms;

    if (formsTable) {
      dt_forms = new DataTable(formsTable, {
        ajax: {
          url: '/api/forms',
          headers: { 'CSRF-Token': CSRF },
          xhrFields: {
            withCredentials: true
          }
        },
        columns: [
          { data: 'title' },
          { data: 'category' },
          { data: 'updatedAt' },
          { data: 'id' }
        ],
        columnDefs: [
          {
            // Title column
            targets: 0,
            render: function (data, type, full, meta) {
              return `<span class="fw-medium js-title">${data || ''}</span>`;
            }
          },
          {
            // Category column
            targets: 1,
            render: function (data, type, full, meta) {
              if (data && data.id) {
                return `<span class="badge rounded-pill js-cat-badge" style="background-color: ${data.color}; color: white;" data-cat="${data.id}">${data.name}</span>`;
              }
              return '<span class="badge rounded-pill js-cat-badge bg-label-secondary">Uncategorized</span>';
            }
          },
          {
            // Updated column
            targets: 2,
            render: function (data, type, full, meta) {
              return `<span class="text-muted">${formatDateVerbose(data)}</span>`;
            }
          },
          {
            // Actions column
            targets: -1,
            title: 'Actions',
            orderable: false,
            searchable: false,
            render: function (data, type, full, meta) {
              return `
                <div class="d-inline-flex align-items-center gap-1 justify-content-start">
                  <button type="button" class="btn btn-sm btn-outline-primary js-act-edit" data-id="${full.id}">
                    <i class="icon-base ti tabler-edit icon-sm me-1"></i>
                    Edit
                  </button>
                  <div class="btn-group">
                    <button type="button"
                      class="btn btn-sm btn-icon rounded-pill dropdown-toggle hide-arrow btn-text-secondary js-actions"
                      data-bs-toggle="dropdown" data-bs-container="body" aria-expanded="false">
                      <i class="icon-base ti tabler-dots-vertical icon-20px"></i>
                    </button>
                    <ul class="dropdown-menu dropdown-menu-end">
                      <li>
                        <a class="dropdown-item js-act-rename" href="javascript:void(0);" data-id="${full.id}">
                          <i class="icon-base ti tabler-info-circle icon-sm me-2"></i>
                          Info
                        </a>
                      </li>
                      <li>
                        <a class="dropdown-item js-act-test-hosted" href="javascript:void(0);" data-id="${full.id}">
                          <i class="icon-base ti tabler-external-link icon-sm me-2"></i>
                          Test Hosted Form
                        </a>
                      </li>
                      <li>
                        <a class="dropdown-item text-danger js-delete" href="javascript:void(0);" data-id="${full.id}">
                          <i class="icon-base ti tabler-trash icon-sm me-2"></i>
                          Delete
                        </a>
                      </li>
                    </ul>
                  </div>
                </div>
              `;
            }
          }
        ],
        order: [[2, 'desc']], // Sort by updated date descending by default
        layout: {
          topStart: {
            rowClass: 'row mx-3 my-0 justify-content-between',
            features: [
              {
                pageLength: {
                  menu: [10, 25, 50, 100],
                  text: 'Show_MENU_entries'
                }
              }
            ]
          },
          topEnd: {
            search: {
              placeholder: 'Search forms...'
            }
          },
          bottomStart: {
            rowClass: 'row mx-3 justify-content-between',
            features: ['info']
          },
          bottomEnd: 'paging'
        },
        language: {
          paginate: {
            next: '<i class="icon-base ti tabler-chevron-right scaleX-n1-rtl icon-18px"></i>',
            previous: '<i class="icon-base ti tabler-chevron-left scaleX-n1-rtl icon-18px"></i>',
            first: '<i class="icon-base ti tabler-chevrons-left scaleX-n1-rtl icon-18px"></i>',
            last: '<i class="icon-base ti tabler-chevrons-right scaleX-n1-rtl icon-18px"></i>'
          }
        }
      });

      // Initialize dropdowns after table is drawn
      formsTable.addEventListener('draw.dt', function () {
        document.querySelectorAll('.js-actions').forEach(btn => {
          try {
            const dd = bootstrap.Dropdown.getOrCreateInstance(btn, {
              boundary: 'viewport',
              popperConfig(config) {
                return Object.assign({}, config || {}, { strategy: 'fixed' });
              }
            });
            void dd;
          } catch (_) { /* ignore */ }
        });
      });

      // Create Form wizard logic
      (function initCreateFormWizard() {
        const modalEl = document.getElementById('createFormModal');
        const wiz = document.getElementById('createFormWizard');
        if (!modalEl || !wiz) return;

        const stepChoose = wiz.querySelector('[data-step="choose"]');
        const stepBlank = wiz.querySelector('[data-step="blank"]');
        const stepTpl = wiz.querySelector('[data-step="templates"]');
        const btnBack = wiz.querySelector('.js-wiz-back');
        const btnNext = wiz.querySelector('.js-wiz-next');
        const titleEl = wiz.querySelector('.js-wiz-title');
        const inputTitle = wiz.querySelector('#blankTitle');
        const selCat = wiz.querySelector('#blankCategory');

        let mode = 'choose'; // 'choose' | 'blank' (details) | 'templates'
        let fromTemplates = false;
        let selectedFields = [];

        let TEMPLATES = {};

        // Load templates from API
        async function loadTemplates(retryCount = 0) {
          try {
            const res = await fetch('/api/templates/active', {
              headers: { 'CSRF-Token': CSRF },
              credentials: 'include'
            });
            const result = await res.json();
            if (!res.ok) {
              if (retryCount < 2) {
                console.warn(`Template loading failed, retrying... (${retryCount + 1}/2)`);
                await new Promise(resolve => setTimeout(resolve, 1000));
                return loadTemplates(retryCount + 1);
              }
              throw new Error(result?.error || 'Failed to load templates');
            }

            TEMPLATES = {};
            const container = document.getElementById('templatesContainer');
            if (!container) return;

            if (result.data && result.data.length > 0) {
              container.innerHTML = '';
              result.data.forEach(template => {
                TEMPLATES[template.id] = template;

                const col = document.createElement('div');
                col.className = 'col';

                const icon = getTemplateIcon(template.name);
                col.innerHTML = `
                  <label class="btn btn-outline-secondary d-inline-flex align-items-center justify-content-start w-100 template-tile">
                    <input class="d-none" type="radio" name="templateChoice" value="${template.id}">
                    <i class="icon-base ti ${icon} me-2 icon-20px"></i>
                    <span class="fw-medium">${template.name}</span>
                  </label>
                `;
                container.appendChild(col);
              });
            } else {
              container.innerHTML = `
                <div class="col-12">
                  <div class="alert alert-warning">
                    <i class="icon-base ti tabler-alert-triangle me-2"></i>
                    No templates available. <a href="/templates" class="alert-link">Create a template</a> first.
                  </div>
                </div>
              `;
            }
          } catch (err) {
            console.error('Error loading templates:', err);
            const container = document.getElementById('templatesContainer');
            if (container) {
              container.innerHTML = `
                <div class="col-12">
                  <div class="alert alert-danger">
                    <i class="icon-base ti tabler-alert-circle me-2"></i>
                    Failed to load templates. Please try again.
                  </div>
                </div>
              `;
            }
          }
        }

        // Get appropriate icon for template name
        function getTemplateIcon(name) {
          const lowerName = name.toLowerCase();
          if (lowerName.includes('newsletter') || lowerName.includes('mail')) return 'tabler-mail';
          if (lowerName.includes('complaint') || lowerName.includes('issue')) return 'tabler-alert-triangle';
          if (lowerName.includes('profile') || lowerName.includes('user')) return 'tabler-user';
          if (lowerName.includes('rsvp') || lowerName.includes('event')) return 'tabler-calendar';
          if (lowerName.includes('contact')) return 'tabler-phone';
          if (lowerName.includes('support') || lowerName.includes('ticket')) return 'tabler-lifebuoy';
          if (lowerName.includes('job') || lowerName.includes('application')) return 'tabler-briefcase';
          if (lowerName.includes('survey') || lowerName.includes('nps')) return 'tabler-chart-pie';
          if (lowerName.includes('feedback')) return 'tabler-message-circle';
          if (lowerName.includes('registration')) return 'tabler-user-plus';
          return 'tabler-template';
        }

        function show(step) {
          mode = step;
          stepChoose.classList.toggle('d-none', step !== 'choose');
          stepBlank.classList.toggle('d-none', step !== 'blank');
          stepTpl.classList.toggle('d-none', step !== 'templates');
          btnBack.classList.toggle('d-none', step === 'choose');
          // Hide Next on first step; users pick a tile instead
          btnNext.classList.toggle('d-none', step === 'choose');
          btnNext.textContent = 'Create';
          titleEl.textContent = 'Create a Form';
        }

        wiz.querySelector('.js-choose-blank')?.addEventListener('click', () => {
          // If user opts for blank after exploring templates, reset any prefilled values
          fromTemplates = false;
          selectedFields = [];
          if (inputTitle) inputTitle.value = '';
          show('blank');
        });
        wiz.querySelector('.js-choose-template')?.addEventListener('click', async () => {
          try {
            await loadTemplates();
            show('templates');
          } catch (error) {
            console.error('Failed to load templates:', error);
            alert('Failed to load templates. Please try again.');
          }
        });
        // Template tile click -> select radio and set primary label style
        wiz.querySelector('[data-step="templates"]')?.addEventListener('click', (e) => {
          const tile = e.target.closest('.template-tile');
          if (!tile) return;
          // Reset all tiles to outline-secondary and remove active/primary
          wiz.querySelectorAll('.template-tile').forEach(el => {
            el.classList.remove('active', 'btn-primary', 'btn-label-primary');
            el.classList.add('btn-outline-secondary');
          });
          // Activate selected tile with primary label color (not filled)
          tile.classList.add('active', 'btn-label-primary');
          tile.classList.remove('btn-outline-secondary', 'btn-primary');
          const input = tile.querySelector('input[type=radio][name=templateChoice]');
          if (input) { input.checked = true; input.dispatchEvent(new Event('change', { bubbles: true })); }
        });

        btnBack?.addEventListener('click', () => {
          if (mode === 'blank' && fromTemplates) {
            show('templates');
          } else {
            show('choose');
          }
        });

        btnNext?.addEventListener('click', async () => {
          try {
            if (mode === 'blank') {
              const title = (inputTitle?.value || '').trim();
              if (!title) { inputTitle?.focus(); return; }
              const categoryId = selCat?.value || '';
              const res = await fetch('/api/forms', {
                method: 'POST', headers: { 'Content-Type': 'application/json', 'CSRF-Token': CSRF },
                credentials: 'include',
                body: JSON.stringify({ title, categoryId, fields: (Array.isArray(selectedFields) ? selectedFields : []) })
              });
              const out = await res.json();
              if (!res.ok || !out?.form?.id) throw new Error(out?.error || 'Create failed');
              dt_forms.ajax.reload();
              bootstrap.Modal.getInstance(modalEl)?.hide();
              window.location.assign('/builder/' + out.form.id);
              return;
            }

            if (mode === 'templates') {
              const selected = wiz.querySelector('input[name="templateChoice"]:checked');
              if (!selected) return;
              const key = selected.value;
              const tpl = TEMPLATES[key];
              if (!tpl) {
                alert('Template not found. Please try again.');
                return;
              }
              // Move to details step with prefilled fields
              selectedFields = Array.isArray(tpl.fields) ? tpl.fields : [];
              fromTemplates = true;
              if (inputTitle) inputTitle.value = tpl.name || '';
              if (selCat) {
                const categoryId = tpl.categoryId || '';
                // Validate that the category exists in the form's category list
                const categoryExists = Array.from(selCat.options).some(option => option.value === categoryId);
                selCat.value = categoryExists ? categoryId : '';
              }
              show('blank');
              return;
            }

            // From choose -> go to blank as default
            show('blank');
          } catch (err) {
            console.error(err);
            alert(err?.message || 'Could not create form.');
          }
        });

        // Reset wizard on open
        modalEl.addEventListener('show.bs.modal', () => {
          // Clear selected template visual state
          wiz.querySelectorAll('.template-tile').forEach(el => {
            el.classList.remove('active', 'btn-primary', 'btn-label-primary');
            el.classList.add('btn-outline-secondary');
          });
          wiz.querySelector('input[name="templateChoice"]:checked')?.closest('label')?.classList.remove('active');
          const checked = wiz.querySelector('input[name="templateChoice"]:checked');
          if (checked) checked.checked = false;
          inputTitle && (inputTitle.value = '');
          selCat && (selCat.value = '');
          selectedFields = [];
          fromTemplates = false;
          show('choose');
        });
      })();

      // Handle table clicks
      formsTable.addEventListener('click', async (e) => {
        const btn = e.target.closest('.js-delete');
        if (btn) {
          const id = btn.getAttribute('data-id');
          if (!id) return;

          // Get form data from DataTable
          const formData = dt_forms.row(`tr:has([data-id="${id}"])`).data();
          if (!formData) return;

          const modalEl = document.getElementById('confirmDeleteModal');
          modalEl.dataset.id = id;
          modalEl.querySelector('.js-del-title').textContent = formData.title || 'this form';
          const m = bootstrap.Modal.getOrCreateInstance(modalEl);
          m.show();
          return;
        }

        // Edit action
        const actEdit = e.target.closest('.js-act-edit');
        if (actEdit) {
          const id = actEdit.getAttribute('data-id');
          if (!id) return;
          window.location.assign('/builder/' + id);
          return;
        }

        // Rename action
        const actRename = e.target.closest('.js-act-rename');
        if (actRename) {
          const id = actRename.getAttribute('data-id');
          if (!id) return;

          // Get form data from DataTable
          const formData = dt_forms.row(`tr:has([data-id="${id}"])`).data();
          if (!formData) return;

          const modalEl = document.getElementById('renameFormModal');
          modalEl.dataset.id = id;
          const input = modalEl.querySelector('#renameFormInput');
          input.value = formData.title || '';
          // Prefill category from the form data
          const currentCat = formData.categoryId || '';
          const sel = modalEl.querySelector('#renameFormCategory');
          if (sel) sel.value = currentCat;
          const m = bootstrap.Modal.getOrCreateInstance(modalEl);
          m.show();
          return;
        }

        // Test hosted form action
        const actTestHosted = e.target.closest('.js-act-test-hosted');
        if (actTestHosted) {
          const id = actTestHosted.getAttribute('data-id');
          if (!id) return;
          // Open the hosted form in a new tab
          window.open('/f/' + id, '_blank');
          return;
        }
      });

      // Delete modal confirm
      document.getElementById('confirmDeleteBtn')?.addEventListener('click', async () => {
        const modalEl = document.getElementById('confirmDeleteModal');
        const id = modalEl?.dataset.id;
        if (!id) return;
        const row = document.querySelector(`tr[data-id="${CSS.escape(id)}"]`);
        const btn = document.getElementById('confirmDeleteBtn');
        const originalText = btn?.textContent;

        try {
          // Show loading state
          if (btn) {
            btn.disabled = true;
            btn.textContent = 'Deleting...';
          }

          const res = await fetch('/api/forms/' + id, { method: 'DELETE', headers: { 'CSRF-Token': CSRF }, credentials: 'include' });
          if (!res.ok) throw new Error('Delete failed');

          dt_forms.ajax.reload();
          bootstrap.Modal.getInstance(modalEl)?.hide();
        } catch (err) {
          console.error(err);
          alert('Could not delete form.');
        } finally {
          // Restore button state
          if (btn) {
            btn.disabled = false;
            btn.textContent = originalText;
          }
        }
      });

      // Rename modal submit
      document.getElementById('renameFormForm')?.addEventListener('submit', async (e) => {
        e.preventDefault();
        const modalEl = document.getElementById('renameFormModal');
        const id = modalEl?.dataset.id;
        if (!id) return;
        const input = document.getElementById('renameFormInput');
        const newTitle = String(input.value || '').trim();
        if (!newTitle) return;
        const catSelect = document.getElementById('renameFormCategory');
        const newCategoryId = catSelect?.value || '';
        const row = document.querySelector(`tr[data-id="${CSS.escape(id)}"]`);
        const titleCell = row?.querySelector('.js-title');
        try {
          const res = await fetch('/api/forms/' + id, {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json', 'CSRF-Token': CSRF },
            credentials: 'include',
            body: JSON.stringify({ title: newTitle, categoryId: newCategoryId })
          });
          const out = await res.json().catch(() => ({}));
          if (!res.ok) {
            if (res.status === 409) throw new Error('Title already exists.');
            throw new Error(out?.error || 'Update failed');
          }
          dt_forms.ajax.reload();
          bootstrap.Modal.getInstance(modalEl)?.hide();
        } catch (err) {
          console.error(err);
          alert(err?.message || 'Could not rename form');
        }
      });
    }
  });
</script>
{{/section}}

{{!-- Rename Form modal --}}
<div class="modal fade" id="renameFormModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <form class="modal-content" id="renameFormForm">
      <div class="modal-header">
        <h5 class="modal-title">Form info</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="mb-3">
          <label class="form-label" for="renameFormInput">New name</label>
          <input id="renameFormInput" type="text" class="form-control" placeholder="Enter new form name" required>
        </div>
        <div>
          <label class="form-label" for="renameFormCategory">Category</label>
          <select id="renameFormCategory" class="form-select">
            <option value="">Uncategorized</option>
            {{#each categories}}
            <option value="{{this.id}}">{{this.name}}</option>
            {{/each}}
          </select>
        </div>
      </div>
      <div class="modal-footer">
        <button class="btn btn-secondary" type="button" data-bs-dismiss="modal">Cancel</button>
        <button class="btn btn-primary" type="submit">Save</button>
      </div>
    </form>
  </div>
</div>

{{!-- Delete Confirm modal --}}
<div class="modal fade" id="confirmDeleteModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Delete form</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p>Are you sure you want to delete <strong class="js-del-title">this form</strong>? This action cannot be
          undone.</p>
      </div>
      <div class="modal-footer">
        <button class="btn btn-secondary" type="button" data-bs-dismiss="modal">Cancel</button>
        <button class="btn btn-danger" id="confirmDeleteBtn" type="button">Delete</button>
      </div>
    </div>
  </div>
</div>