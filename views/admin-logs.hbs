<div class="card">
    <div class="card-header">
        <h5 class="mb-0">Audit Logs</h5>
    </div>
    <div class="card-datatable table-responsive pt-0">
        <table class="datatables-logs table" id="logsTable">
            <thead>
                <tr>
                    <th>Time</th>
                    <th>User</th>
                    <th>Entity</th>
                    <th>Entity ID</th>
                    <th>Action</th>
                    <th>Details</th>
                </tr>
            </thead>
        </table>
    </div>
</div>

{{#section 'scripts'}}
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const CSRF = document.querySelector('meta[name="csrf-token"]').content || window.CSRF_TOKEN || '';

        function tryParseJSON(raw) {
            try { return raw ? JSON.parse(raw) : null; } catch { return null; }
        }

        function pretty(obj) {
            try { return JSON.stringify(obj, null, 2); } catch { return String(obj || ''); }
        }

        function actionLabel(a) {
            const v = String(a || '').toLowerCase();
            if (v === 'create') return 'Create';
            if (v === 'update') return 'Update';
            if (v === 'delete') return 'Delete';
            return (a || '').toString();
        }

        function actionBadge(a) {
            const v = String(a || '').toLowerCase();
            if (v === 'create') return 'bg-label-success';
            if (v === 'update') return 'bg-label-info';
            if (v === 'delete') return 'bg-label-danger';
            return 'bg-label-secondary';
        }

        function entityBadge(e) {
            const v = String(e || '').toLowerCase();
            if (v === 'form') return 'bg-label-primary';
            if (v === 'user') return 'bg-label-info';
            if (v === 'auth') return 'bg-label-warning';
            return 'bg-label-secondary';
        }

        function entityLabel(e) {
            const s = String(e || '');
            return s ? s.charAt(0).toUpperCase() + s.slice(1) : '';
        }

        // Initialize DataTable
        const logsTable = document.getElementById('logsTable');
        let dt_logs;

        if (logsTable) {
            dt_logs = new DataTable(logsTable, {
                ajax: {
                    url: '/api/logs',
                    headers: { 'CSRF-Token': CSRF }
                },
                columns: [
                    { data: 'createdAt' },
                    { data: 'userId' },
                    { data: 'entity' },
                    { data: 'entityId' },
                    { data: 'action' },
                    { data: 'id' }
                ],
                columnDefs: [
                    {
                        // Time column
                        targets: 0,
                        render: function (data, type, full, meta) {
                            const createdAt = data;
                            const dt = new Date(createdAt);
                            const date = isNaN(dt) ? (createdAt || '') : `${String(dt.getDate()).padStart(2, '0')} ${['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'][dt.getMonth()]} ${dt.getFullYear()}`;
                            const time = isNaN(dt) ? '' : `${String(dt.getHours()).padStart(2, '0')}:${String(dt.getMinutes()).padStart(2, '0')}:${String(dt.getSeconds()).padStart(2, '0')}`;
                            return `
                                <div class="fw-medium">${date}</div>
                                <div class="text-muted small">${time}</div>
                            `;
                        }
                    },
                    {
                        // User column
                        targets: 1,
                        render: function (data, type, full, meta) {
                            if (full.userId) {
                                return `
                                    <div class="fw-medium">${full.userEmail || `user: ${full.userId}`}</div>
                                    <div class="text-muted small">${full.userUsername || ''}</div>
                                `;
                            }
                            return '<span class="text-muted">-</span>';
                        }
                    },
                    {
                        // Entity column
                        targets: 2,
                        render: function (data, type, full, meta) {
                            return `<span class="badge rounded-pill ${entityBadge(data)}">${entityLabel(data)}</span>`;
                        }
                    },
                    {
                        // Entity ID column
                        targets: 3,
                        render: function (data, type, full, meta) {
                            return data ? `<code class="small">${data}</code>` : '<span class="text-muted">-</span>';
                        }
                    },
                    {
                        // Action column
                        targets: 4,
                        render: function (data, type, full, meta) {
                            return `<span class="badge rounded-pill ${actionBadge(data)}">${actionLabel(data)}</span>`;
                        }
                    },
                    {
                        // Details column
                        targets: -1,
                        title: 'Details',
                        orderable: false,
                        searchable: false,
                        render: function (data, type, full, meta) {
                            // Store meta data in a more reliable way to avoid HTML attribute issues
                            const metaData = full.metaJson ? JSON.stringify(full.metaJson) : '';
                            return `
                                <div class="d-inline-flex align-items-center gap-1 justify-content-start">
                                    <button type="button" class="btn btn-sm btn-outline-secondary js-show-details" 
                                            data-id="${full.id}" 
                                            data-meta-json="${encodeURIComponent(metaData)}"
                                            data-ip="${full.ip || ''}" 
                                            data-ua="${full.ua || ''}"
                                            data-entity="${full.entity || ''}" 
                                            data-entity-id="${full.entityId || ''}" 
                                            data-action="${full.action || ''}"
                                            data-user-id="${full.userId || ''}" 
                                            data-user-email="${full.userEmail || ''}"
                                            data-user-username="${full.userUsername || ''}">
                                        <i class="icon-base ti tabler-info-circle icon-sm me-1"></i>
                                        Info
                                    </button>
                                </div>
                            `;
                        }
                    }
                ],
                order: [[0, 'desc']], // Sort by time descending by default
                layout: {
                    topStart: {
                        rowClass: 'row mx-3 my-0 justify-content-between',
                        features: [
                            {
                                pageLength: {
                                    menu: [10, 25, 50, 100],
                                    text: 'Show_MENU_entries'
                                }
                            }
                        ]
                    },
                    topEnd: {
                        search: {
                            placeholder: 'Search logs...'
                        }
                    },
                    bottomStart: {
                        rowClass: 'row mx-3 justify-content-between',
                        features: ['info']
                    },
                    bottomEnd: 'paging'
                },
                language: {
                    paginate: {
                        next: '<i class="icon-base ti tabler-chevron-right scaleX-n1-rtl icon-18px"></i>',
                        previous: '<i class="icon-base ti tabler-chevron-left scaleX-n1-rtl icon-18px"></i>',
                        first: '<i class="icon-base ti tabler-chevrons-left scaleX-n1-rtl icon-18px"></i>',
                        last: '<i class="icon-base ti tabler-chevrons-right scaleX-n1-rtl icon-18px"></i>'
                    }
                }
            });

            // Handle Details button clicks
            logsTable.addEventListener('click', (e) => {
                const btn = e.target.closest('.js-show-details');
                if (!btn) return;

                const modalEl = document.getElementById('logDetailsModal');
                if (!modalEl) return;

                // Fill modal with data from button attributes
                modalEl.querySelector('.js-d-id').textContent = btn.getAttribute('data-id') || '';
                const userEmail = btn.getAttribute('data-user-email') || '';
                const userUsername = btn.getAttribute('data-user-username') || '';
                const userId = btn.getAttribute('data-user-id') || '';
                modalEl.querySelector('.js-d-user').textContent = userEmail || (userId ? `user: ${userId}` : '-');
                modalEl.querySelector('.js-d-user-sub').textContent = userUsername || '';
                const entity = btn.getAttribute('data-entity') || '';
                const entityId = btn.getAttribute('data-entity-id') || '';
                modalEl.querySelector('.js-d-entity').textContent = entityLabel(entity);
                const entBadge = modalEl.querySelector('.js-d-entity');
                entBadge.className = `badge rounded-pill js-d-entity ${entityBadge(entity)}`;
                modalEl.querySelector('.js-d-entity-id').textContent = entityId || '-';
                const action = btn.getAttribute('data-action') || '';
                const actEl = modalEl.querySelector('.js-d-action');
                actEl.textContent = actionLabel(action);
                actEl.className = `badge rounded-pill js-d-action ${actionBadge(action)}`;
                modalEl.querySelector('.js-d-ip').textContent = btn.getAttribute('data-ip') || '';
                modalEl.querySelector('.js-d-ua').textContent = btn.getAttribute('data-ua') || '';

                // Meta JSON
                const metaRaw = btn.getAttribute('data-meta-json') || '';

                let meta;
                if (metaRaw) {
                    try {
                        // Decode the URI component first
                        const decodedMeta = decodeURIComponent(metaRaw);

                        // Then parse as JSON
                        meta = JSON.parse(decodedMeta);
                    } catch (e) {
                        meta = metaRaw;
                    }
                } else {
                    meta = null;
                }

                const prettyMeta = pretty(meta);
                modalEl.querySelector('.js-json').textContent = prettyMeta;

                const m = bootstrap.Modal.getOrCreateInstance(modalEl);
                m.show();
            });
        }

        // Expose helpers for dynamic rows
        window.Logs = { actionLabel, actionBadge, entityBadge, entityLabel };
    });
</script>
{{/section}}

<div class="modal fade" id="logDetailsModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Log details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row g-3 mb-2">
                    <div class="col-md-4">
                        <div class="text-muted small">ID</div>
                        <div class="fw-medium js-d-id"></div>
                    </div>
                    <div class="col-md-4">
                        <div class="text-muted small">User</div>
                        <div class="fw-medium js-d-user"></div>
                        <div class="text-muted small js-d-user-sub"></div>
                    </div>
                    <div class="col-md-2">
                        <div class="text-muted small">Entity</div>
                        <div><span class="badge rounded-pill js-d-entity"></span></div>
                    </div>
                    <div class="col-md-2">
                        <div class="text-muted small">Entity ID</div>
                        <div class="fw-medium js-d-entity-id"></div>
                    </div>
                </div>
                <div class="row g-3 mb-3">
                    <div class="col-md-3">
                        <div class="text-muted small">Action</div>
                        <div><span class="badge rounded-pill js-d-action"></span></div>
                    </div>
                    <div class="col-md-3">
                        <div class="text-muted small">IP</div>
                        <div class="fw-medium js-d-ip"></div>
                    </div>
                    <div class="col-md-6">
                        <div class="text-muted small">User Agent</div>
                        <div class="small js-d-ua" style="word-break: break-word;"></div>
                    </div>
                </div>
                <div class="mb-1 text-muted small">Meta</div>
                <pre class="mb-0 small"
                    style="white-space:pre-wrap; word-break:break-word;"><code class="js-json">{}</code></pre>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" type="button" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>