<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">Categories</h5>
        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createCategoryModal">+ New
            Category</button>
    </div>
    <div class="card-datatable table-responsive pt-0">
        <table class="datatables-categories table" id="categoriesTable">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Color</th>
                    <th>Updated</th>
                    <th>Actions</th>
                </tr>
            </thead>
        </table>
    </div>
</div>

<!-- Create Category Modal -->
<div class="modal fade" id="createCategoryModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <form class="modal-content" id="createCategoryForm" onsubmit="event.preventDefault();">
            <div class="modal-header">
                <h5 class="modal-title">Create Category</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label" for="newCategoryName">Name</label>
                    <input id="newCategoryName" type="text" class="form-control" placeholder="e.g. Survey" required
                        maxlength="255">
                </div>
                <div class="mb-3">
                    <label class="form-label" for="newCategoryDescription">Description</label>
                    <textarea id="newCategoryDescription" class="form-control" placeholder="Optional description"
                        rows="3"></textarea>
                </div>
                <div class="mb-3">
                    <label class="form-label" for="newCategoryColor">Color</label>
                    <div class="input-group">
                        <input id="newCategoryColor" type="color" class="form-control form-control-color"
                            value="#6c757d">
                        <input type="text" class="form-control" id="newCategoryColorText" value="#6c757d"
                            placeholder="#6c757d" maxlength="7">
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" class="btn btn-primary">Create</button>
            </div>
        </form>
    </div>
</div>

<!-- Edit Category Modal -->
<div class="modal fade" id="editCategoryModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <form class="modal-content" id="editCategoryForm" onsubmit="event.preventDefault();">
            <div class="modal-header">
                <h5 class="modal-title">Edit Category</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label" for="editCategoryName">Name</label>
                    <input id="editCategoryName" type="text" class="form-control" placeholder="e.g. Survey" required
                        maxlength="255">
                </div>
                <div class="mb-3">
                    <label class="form-label" for="editCategoryDescription">Description</label>
                    <textarea id="editCategoryDescription" class="form-control" placeholder="Optional description"
                        rows="3"></textarea>
                </div>
                <div class="mb-3">
                    <label class="form-label" for="editCategoryColor">Color</label>
                    <div class="input-group">
                        <input id="editCategoryColor" type="color" class="form-control form-control-color"
                            value="#6c757d">
                        <input type="text" class="form-control" id="editCategoryColorText" value="#6c757d"
                            placeholder="#6c757d" maxlength="7">
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" class="btn btn-primary">Update</button>
            </div>
        </form>
    </div>
</div>

{{#section 'scripts'}}
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const CSRF = document.querySelector('meta[name="csrf-token"]').content || window.CSRF_TOKEN || '';

        function formatDateVerbose(val) {
            try {
                const d = new Date(val);
                if (isNaN(d)) return String(val || '');
                const DD = String(d.getDate()).padStart(2, '0');
                const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];
                const MMM = months[d.getMonth()] || '';
                const YYYY = d.getFullYear();
                const hh = String(d.getHours()).padStart(2, '0');
                const mm = String(d.getMinutes()).padStart(2, '0');
                const ss = String(d.getSeconds()).padStart(2, '0');
                return `${DD} ${MMM} ${YYYY}, ${hh}:${mm}:${ss}`;
            } catch (_) { return String(val || ''); }
        }

        // Color picker synchronization
        function syncColorInputs(colorInput, textInput) {
            colorInput.addEventListener('input', () => {
                textInput.value = colorInput.value;
            });
            textInput.addEventListener('input', () => {
                const value = textInput.value;
                if (/^#[0-9A-Fa-f]{6}$/.test(value)) {
                    colorInput.value = value;
                }
            });
        }

        // Initialize color picker sync for create modal
        syncColorInputs(
            document.getElementById('newCategoryColor'),
            document.getElementById('newCategoryColorText')
        );

        // Initialize color picker sync for edit modal
        syncColorInputs(
            document.getElementById('editCategoryColor'),
            document.getElementById('editCategoryColorText')
        );

        // Initialize DataTable
        const categoriesTable = document.getElementById('categoriesTable');
        let dt_categories;

        if (categoriesTable) {
            dt_categories = new DataTable(categoriesTable, {
                ajax: {
                    url: '/api/categories',
                    headers: { 'CSRF-Token': CSRF },
                    xhrFields: {
                        withCredentials: true
                    }
                },
                columns: [
                    { data: 'name' },
                    { data: 'description' },
                    { data: 'color' },
                    { data: 'updatedAt' },
                    { data: 'id' }
                ],
                columnDefs: [
                    {
                        // Name column
                        targets: 0,
                        render: function (data, type, full, meta) {
                            return `<span class="fw-medium">${data || ''}</span>`;
                        }
                    },
                    {
                        // Description column
                        targets: 1,
                        render: function (data, type, full, meta) {
                            return `<span class="text-muted">${data || ''}</span>`;
                        }
                    },
                    {
                        // Color column
                        targets: 2,
                        render: function (data, type, full, meta) {
                            return `<span class="badge rounded-pill" style="background-color: ${data}; color: white;">${data}</span>`;
                        }
                    },
                    {
                        // Updated column
                        targets: 3,
                        render: function (data, type, full, meta) {
                            return `<span class="text-muted">${formatDateVerbose(data)}</span>`;
                        }
                    },
                    {
                        // Actions column
                        targets: -1,
                        title: 'Actions',
                        orderable: false,
                        searchable: false,
                        render: function (data, type, full, meta) {
                            return `
                                <div class="d-inline-flex align-items-center gap-1 justify-content-start">
                                    <div class="btn-group">
                                        <button type="button"
                                            class="btn btn-sm btn-icon rounded-pill dropdown-toggle hide-arrow btn-text-secondary js-actions"
                                            data-bs-toggle="dropdown" data-bs-container="body" aria-expanded="false">
                                            <i class="icon-base ti tabler-dots-vertical icon-20px"></i>
                                        </button>
                                        <ul class="dropdown-menu dropdown-menu-end">
                                            <li>
                                                <a class="dropdown-item js-edit-category" href="javascript:void(0);" data-id="${full.id}">
                                                    <i class="icon-base ti tabler-edit icon-sm me-2"></i>
                                                    Edit
                                                </a>
                                            </li>
                                            <li>
                                                <a class="dropdown-item text-danger js-delete-category" href="javascript:void(0);" data-id="${full.id}">
                                                    <i class="icon-base ti tabler-trash icon-sm me-2"></i>
                                                    Delete
                                                </a>
                                            </li>
                                        </ul>
                                    </div>
                                </div>
                            `;
                        }
                    }
                ],
                order: [[0, 'asc']], // Sort by name ascending by default
                layout: {
                    topStart: {
                        rowClass: 'row mx-3 my-0 justify-content-between',
                        features: [
                            {
                                pageLength: {
                                    menu: [10, 25, 50, 100],
                                    text: 'Show_MENU_entries'
                                }
                            }
                        ]
                    },
                    topEnd: {
                        search: {
                            placeholder: 'Search categories...'
                        }
                    },
                    bottomStart: {
                        rowClass: 'row mx-3 justify-content-between',
                        features: ['info']
                    },
                    bottomEnd: 'paging'
                },
                language: {
                    paginate: {
                        next: '<i class="icon-base ti tabler-chevron-right scaleX-n1-rtl icon-18px"></i>',
                        previous: '<i class="icon-base ti tabler-chevron-left scaleX-n1-rtl icon-18px"></i>',
                        first: '<i class="icon-base ti tabler-chevrons-left scaleX-n1-rtl icon-18px"></i>',
                        last: '<i class="icon-base ti tabler-chevrons-right scaleX-n1-rtl icon-18px"></i>'
                    }
                }
            });

            // Initialize dropdowns after table is drawn
            categoriesTable.addEventListener('draw.dt', function () {
                document.querySelectorAll('.js-actions').forEach(btn => {
                    try {
                        const dd = bootstrap.Dropdown.getOrCreateInstance(btn, {
                            boundary: 'viewport',
                            popperConfig(config) { return Object.assign({}, config || {}, { strategy: 'fixed' }); }
                        });
                        void dd;
                    } catch (_) { }
                });
            });

            // Handle table clicks
            categoriesTable.addEventListener('click', async (e) => {
                const edit = e.target.closest('.js-edit-category');
                if (edit) {
                    const id = edit.getAttribute('data-id');
                    if (!id) return;

                    // Get category data from DataTable
                    const categoryData = dt_categories.row(`tr:has([data-id="${id}"])`).data();
                    if (!categoryData) return;

                    const modalEl = document.getElementById('editCategoryModal');
                    modalEl.dataset.id = id;

                    // Populate form with current values
                    document.getElementById('editCategoryName').value = categoryData.name || '';
                    document.getElementById('editCategoryDescription').value = categoryData.description || '';
                    document.getElementById('editCategoryColor').value = categoryData.color || '#6c757d';
                    document.getElementById('editCategoryColorText').value = categoryData.color || '#6c757d';

                    const m = bootstrap.Modal.getOrCreateInstance(modalEl);
                    m.show();
                    return;
                }

                const del = e.target.closest('.js-delete-category');
                if (del) {
                    const id = del.getAttribute('data-id');
                    if (!id) return;

                    if (!confirm('Delete this category? This action cannot be undone.')) return;
                    try {
                        const res = await fetch('/api/categories/' + id, {
                            method: 'DELETE',
                            headers: { 'CSRF-Token': CSRF },
                            credentials: 'include'
                        });
                        const result = await res.json();
                        if (!res.ok) throw new Error(result?.error || 'Delete failed');
                        dt_categories.ajax.reload();
                    } catch (err) {
                        alert(err?.message || 'Could not delete category');
                    }
                    return;
                }
            });

            // Create category form
            document.getElementById('createCategoryForm')?.addEventListener('submit', async (e) => {
                e.preventDefault();
                const name = document.getElementById('newCategoryName').value.trim();
                const description = document.getElementById('newCategoryDescription').value.trim();
                const color = document.getElementById('newCategoryColor').value;

                if (!name) {
                    alert('Category name is required');
                    return;
                }

                try {
                    const res = await fetch('/api/categories', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json', 'CSRF-Token': CSRF },
                        credentials: 'include',
                        body: JSON.stringify({ name, description, color })
                    });
                    const result = await res.json();
                    if (!res.ok) throw new Error(result?.error || 'Create failed');
                    dt_categories.ajax.reload();
                    bootstrap.Modal.getInstance(document.getElementById('createCategoryModal'))?.hide();
                } catch (err) {
                    alert(err?.message || 'Could not create category');
                }
            });

            // Edit category form
            document.getElementById('editCategoryForm')?.addEventListener('submit', async (e) => {
                e.preventDefault();
                const modalEl = document.getElementById('editCategoryModal');
                const id = modalEl?.dataset.id;
                if (!id) return;

                const name = document.getElementById('editCategoryName').value.trim();
                const description = document.getElementById('editCategoryDescription').value.trim();
                const color = document.getElementById('editCategoryColor').value;

                if (!name) {
                    alert('Category name is required');
                    return;
                }

                try {
                    const res = await fetch('/api/categories/' + id, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json', 'CSRF-Token': CSRF },
                        credentials: 'include',
                        body: JSON.stringify({ name, description, color })
                    });
                    const result = await res.json();
                    if (!res.ok) throw new Error(result?.error || 'Update failed');

                    dt_categories.ajax.reload();
                    bootstrap.Modal.getInstance(modalEl)?.hide();
                } catch (err) {
                    alert(err?.message || 'Could not update category');
                }
            });
        }
    });
</script>
{{/section}}